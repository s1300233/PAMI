{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMlLgEzDuA9wxlCEvhYzb0e",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/s1300233/PAMI/blob/main/ex13.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Install the PAMI repository\n",
        "!pip install -U PAMI\n"
      ],
      "metadata": {
        "id": "wYGh0MQyMWnY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Load the CSV file into a DataFrame\n",
        "df = pd.read_csv('PM25_data.csv', index_col=0)\n",
        "\n",
        "# Display the first few rows of the DataFrame\n",
        "df.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        },
        "id": "c1PnCqrWH1xj",
        "outputId": "dc67e2d4-5f6e-453d-c076-6b8e40b693f0"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                     Point(Point(128.8409418 32.6954809))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   NaN   \n",
              "2024-01-01 02:00:00                                   NaN   \n",
              "2024-01-01 03:00:00                                   NaN   \n",
              "2024-01-01 04:00:00                                   NaN   \n",
              "2024-01-01 05:00:00                                   NaN   \n",
              "\n",
              "                     Point(Point(128.8460344 32.6989579))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   9.0   \n",
              "2024-01-01 02:00:00                                   8.0   \n",
              "2024-01-01 03:00:00                                   5.0   \n",
              "2024-01-01 04:00:00                                   4.0   \n",
              "2024-01-01 05:00:00                                   4.0   \n",
              "\n",
              "                     Point(Point(129.2857639 34.2426737))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   8.0   \n",
              "2024-01-01 02:00:00                                   9.0   \n",
              "2024-01-01 03:00:00                                   8.0   \n",
              "2024-01-01 04:00:00                                  10.0   \n",
              "2024-01-01 05:00:00                                  12.0   \n",
              "\n",
              "                     Point(Point(129.289686 34.2102138))  \\\n",
              "Timestamp                                                  \n",
              "2024-01-01 01:00:00                                  7.0   \n",
              "2024-01-01 02:00:00                                  7.0   \n",
              "2024-01-01 03:00:00                                  7.0   \n",
              "2024-01-01 04:00:00                                 13.0   \n",
              "2024-01-01 05:00:00                                 13.0   \n",
              "\n",
              "                     Point(Point(129.6669321 33.1948696))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   NaN   \n",
              "2024-01-01 02:00:00                                   NaN   \n",
              "2024-01-01 03:00:00                                   NaN   \n",
              "2024-01-01 04:00:00                                   NaN   \n",
              "2024-01-01 05:00:00                                   NaN   \n",
              "\n",
              "                     Point(Point(129.6750369 32.9215763))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   3.0   \n",
              "2024-01-01 02:00:00                                   3.0   \n",
              "2024-01-01 03:00:00                                   4.0   \n",
              "2024-01-01 04:00:00                                   2.0   \n",
              "2024-01-01 05:00:00                                   1.0   \n",
              "\n",
              "                     Point(Point(129.691157 33.7505959))  \\\n",
              "Timestamp                                                  \n",
              "2024-01-01 01:00:00                                  4.0   \n",
              "2024-01-01 02:00:00                                  5.0   \n",
              "2024-01-01 03:00:00                                  9.0   \n",
              "2024-01-01 04:00:00                                  7.0   \n",
              "2024-01-01 05:00:00                                  7.0   \n",
              "\n",
              "                     Point(Point(129.715007 33.3457306))  \\\n",
              "Timestamp                                                  \n",
              "2024-01-01 01:00:00                                  4.0   \n",
              "2024-01-01 02:00:00                                  8.0   \n",
              "2024-01-01 03:00:00                                  8.0   \n",
              "2024-01-01 04:00:00                                  7.0   \n",
              "2024-01-01 05:00:00                                  8.0   \n",
              "\n",
              "                     Point(Point(129.7157996 33.1804356))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   6.0   \n",
              "2024-01-01 02:00:00                                   4.0   \n",
              "2024-01-01 03:00:00                                   4.0   \n",
              "2024-01-01 04:00:00                                   6.0   \n",
              "2024-01-01 05:00:00                                   7.0   \n",
              "\n",
              "                     Point(Point(129.7211625 33.208478))  ...  \\\n",
              "Timestamp                                                 ...   \n",
              "2024-01-01 01:00:00                                  NaN  ...   \n",
              "2024-01-01 02:00:00                                  NaN  ...   \n",
              "2024-01-01 03:00:00                                  NaN  ...   \n",
              "2024-01-01 04:00:00                                  NaN  ...   \n",
              "2024-01-01 05:00:00                                  NaN  ...   \n",
              "\n",
              "                     Point(Point(141.925667 42.5790773))  \\\n",
              "Timestamp                                                  \n",
              "2024-01-01 01:00:00                                  NaN   \n",
              "2024-01-01 02:00:00                                  NaN   \n",
              "2024-01-01 03:00:00                                  NaN   \n",
              "2024-01-01 04:00:00                                  NaN   \n",
              "2024-01-01 05:00:00                                  NaN   \n",
              "\n",
              "                     Point(Point(141.9498839 39.6442869))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   4.0   \n",
              "2024-01-01 02:00:00                                   0.0   \n",
              "2024-01-01 03:00:00                                   1.0   \n",
              "2024-01-01 04:00:00                                   1.0   \n",
              "2024-01-01 05:00:00                                   0.0   \n",
              "\n",
              "                     Point(Point(142.3294024 43.7940457))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   7.0   \n",
              "2024-01-01 02:00:00                                   5.0   \n",
              "2024-01-01 03:00:00                                   5.0   \n",
              "2024-01-01 04:00:00                                   9.0   \n",
              "2024-01-01 05:00:00                                   6.0   \n",
              "\n",
              "                     Point(Point(142.3645743 43.7702998))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   4.0   \n",
              "2024-01-01 02:00:00                                   6.0   \n",
              "2024-01-01 03:00:00                                   2.0   \n",
              "2024-01-01 04:00:00                                   5.0   \n",
              "2024-01-01 05:00:00                                   1.0   \n",
              "\n",
              "                     Point(Point(142.3964685 43.7482619))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   1.0   \n",
              "2024-01-01 02:00:00                                   8.0   \n",
              "2024-01-01 03:00:00                                   7.0   \n",
              "2024-01-01 04:00:00                                   8.0   \n",
              "2024-01-01 05:00:00                                   0.0   \n",
              "\n",
              "                     Point(Point(142.4360185 43.8107633))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   3.0   \n",
              "2024-01-01 02:00:00                                   4.0   \n",
              "2024-01-01 03:00:00                                   3.0   \n",
              "2024-01-01 04:00:00                                   6.0   \n",
              "2024-01-01 05:00:00                                   2.0   \n",
              "\n",
              "                     Point(Point(143.1960911 42.9239722))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   2.0   \n",
              "2024-01-01 02:00:00                                   0.0   \n",
              "2024-01-01 03:00:00                                   1.0   \n",
              "2024-01-01 04:00:00                                   1.0   \n",
              "2024-01-01 05:00:00                                   1.0   \n",
              "\n",
              "                     Point(Point(143.8907183 43.7987008))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   2.0   \n",
              "2024-01-01 02:00:00                                   9.0   \n",
              "2024-01-01 03:00:00                                   5.0   \n",
              "2024-01-01 04:00:00                                   3.0   \n",
              "2024-01-01 05:00:00                                   6.0   \n",
              "\n",
              "                     Point(Point(144.2606979 43.0173372))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   NaN   \n",
              "2024-01-01 02:00:00                                   NaN   \n",
              "2024-01-01 03:00:00                                   NaN   \n",
              "2024-01-01 04:00:00                                   NaN   \n",
              "2024-01-01 05:00:00                                   NaN   \n",
              "\n",
              "                     Point(Point(144.3636328 43.0214076))  \n",
              "Timestamp                                                  \n",
              "2024-01-01 01:00:00                                   1.0  \n",
              "2024-01-01 02:00:00                                   0.0  \n",
              "2024-01-01 03:00:00                                   0.0  \n",
              "2024-01-01 04:00:00                                   3.0  \n",
              "2024-01-01 05:00:00                                   1.0  \n",
              "\n",
              "[5 rows x 1476 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-25618124-f0e4-4ff3-8de3-170d48430d22\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Point(Point(128.8409418 32.6954809))</th>\n",
              "      <th>Point(Point(128.8460344 32.6989579))</th>\n",
              "      <th>Point(Point(129.2857639 34.2426737))</th>\n",
              "      <th>Point(Point(129.289686 34.2102138))</th>\n",
              "      <th>Point(Point(129.6669321 33.1948696))</th>\n",
              "      <th>Point(Point(129.6750369 32.9215763))</th>\n",
              "      <th>Point(Point(129.691157 33.7505959))</th>\n",
              "      <th>Point(Point(129.715007 33.3457306))</th>\n",
              "      <th>Point(Point(129.7157996 33.1804356))</th>\n",
              "      <th>Point(Point(129.7211625 33.208478))</th>\n",
              "      <th>...</th>\n",
              "      <th>Point(Point(141.925667 42.5790773))</th>\n",
              "      <th>Point(Point(141.9498839 39.6442869))</th>\n",
              "      <th>Point(Point(142.3294024 43.7940457))</th>\n",
              "      <th>Point(Point(142.3645743 43.7702998))</th>\n",
              "      <th>Point(Point(142.3964685 43.7482619))</th>\n",
              "      <th>Point(Point(142.4360185 43.8107633))</th>\n",
              "      <th>Point(Point(143.1960911 42.9239722))</th>\n",
              "      <th>Point(Point(143.8907183 43.7987008))</th>\n",
              "      <th>Point(Point(144.2606979 43.0173372))</th>\n",
              "      <th>Point(Point(144.3636328 43.0214076))</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Timestamp</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2024-01-01 01:00:00</th>\n",
              "      <td>NaN</td>\n",
              "      <td>9.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-01-01 02:00:00</th>\n",
              "      <td>NaN</td>\n",
              "      <td>8.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-01-01 03:00:00</th>\n",
              "      <td>NaN</td>\n",
              "      <td>5.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>4.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-01-01 04:00:00</th>\n",
              "      <td>NaN</td>\n",
              "      <td>4.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-01-01 05:00:00</th>\n",
              "      <td>NaN</td>\n",
              "      <td>4.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 1476 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-25618124-f0e4-4ff3-8de3-170d48430d22')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-25618124-f0e4-4ff3-8de3-170d48430d22 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-25618124-f0e4-4ff3-8de3-170d48430d22');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a1397b43-25d9-44f9-ac7f-3575a3b38d7c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a1397b43-25d9-44f9-ac7f-3575a3b38d7c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a1397b43-25d9-44f9-ac7f-3575a3b38d7c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Data preprocessing\n",
        "# Replace NaN values with zero\n",
        "df.fillna(0, inplace=True)\n",
        "\n",
        "# Replace values greater than or equal to 100 with zero\n",
        "df[df >= 100] = 0\n",
        "\n",
        "# Drop the timestamp column\n",
        "# Adjust the column name as needed based on the inspection\n",
        "df.drop(columns=[col for col in df.columns if col.strip().lower() == 'timestamp'], inplace=True)\n",
        "\n",
        "# Display the preprocessed data\n",
        "df.head()\n"
      ],
      "metadata": {
        "id": "v5AcqfzNOure",
        "outputId": "c81880eb-fff2-47cb-bdce-244393bc0aac",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 391
        }
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                     Point(Point(128.8409418 32.6954809))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   0.0   \n",
              "2024-01-01 02:00:00                                   0.0   \n",
              "2024-01-01 03:00:00                                   0.0   \n",
              "2024-01-01 04:00:00                                   0.0   \n",
              "2024-01-01 05:00:00                                   0.0   \n",
              "\n",
              "                     Point(Point(128.8460344 32.6989579))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   9.0   \n",
              "2024-01-01 02:00:00                                   8.0   \n",
              "2024-01-01 03:00:00                                   5.0   \n",
              "2024-01-01 04:00:00                                   4.0   \n",
              "2024-01-01 05:00:00                                   4.0   \n",
              "\n",
              "                     Point(Point(129.2857639 34.2426737))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   8.0   \n",
              "2024-01-01 02:00:00                                   9.0   \n",
              "2024-01-01 03:00:00                                   8.0   \n",
              "2024-01-01 04:00:00                                  10.0   \n",
              "2024-01-01 05:00:00                                  12.0   \n",
              "\n",
              "                     Point(Point(129.289686 34.2102138))  \\\n",
              "Timestamp                                                  \n",
              "2024-01-01 01:00:00                                  7.0   \n",
              "2024-01-01 02:00:00                                  7.0   \n",
              "2024-01-01 03:00:00                                  7.0   \n",
              "2024-01-01 04:00:00                                 13.0   \n",
              "2024-01-01 05:00:00                                 13.0   \n",
              "\n",
              "                     Point(Point(129.6669321 33.1948696))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   0.0   \n",
              "2024-01-01 02:00:00                                   0.0   \n",
              "2024-01-01 03:00:00                                   0.0   \n",
              "2024-01-01 04:00:00                                   0.0   \n",
              "2024-01-01 05:00:00                                   0.0   \n",
              "\n",
              "                     Point(Point(129.6750369 32.9215763))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   3.0   \n",
              "2024-01-01 02:00:00                                   3.0   \n",
              "2024-01-01 03:00:00                                   4.0   \n",
              "2024-01-01 04:00:00                                   2.0   \n",
              "2024-01-01 05:00:00                                   1.0   \n",
              "\n",
              "                     Point(Point(129.691157 33.7505959))  \\\n",
              "Timestamp                                                  \n",
              "2024-01-01 01:00:00                                  4.0   \n",
              "2024-01-01 02:00:00                                  5.0   \n",
              "2024-01-01 03:00:00                                  9.0   \n",
              "2024-01-01 04:00:00                                  7.0   \n",
              "2024-01-01 05:00:00                                  7.0   \n",
              "\n",
              "                     Point(Point(129.715007 33.3457306))  \\\n",
              "Timestamp                                                  \n",
              "2024-01-01 01:00:00                                  4.0   \n",
              "2024-01-01 02:00:00                                  8.0   \n",
              "2024-01-01 03:00:00                                  8.0   \n",
              "2024-01-01 04:00:00                                  7.0   \n",
              "2024-01-01 05:00:00                                  8.0   \n",
              "\n",
              "                     Point(Point(129.7157996 33.1804356))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   6.0   \n",
              "2024-01-01 02:00:00                                   4.0   \n",
              "2024-01-01 03:00:00                                   4.0   \n",
              "2024-01-01 04:00:00                                   6.0   \n",
              "2024-01-01 05:00:00                                   7.0   \n",
              "\n",
              "                     Point(Point(129.7211625 33.208478))  ...  \\\n",
              "Timestamp                                                 ...   \n",
              "2024-01-01 01:00:00                                  0.0  ...   \n",
              "2024-01-01 02:00:00                                  0.0  ...   \n",
              "2024-01-01 03:00:00                                  0.0  ...   \n",
              "2024-01-01 04:00:00                                  0.0  ...   \n",
              "2024-01-01 05:00:00                                  0.0  ...   \n",
              "\n",
              "                     Point(Point(141.925667 42.5790773))  \\\n",
              "Timestamp                                                  \n",
              "2024-01-01 01:00:00                                  0.0   \n",
              "2024-01-01 02:00:00                                  0.0   \n",
              "2024-01-01 03:00:00                                  0.0   \n",
              "2024-01-01 04:00:00                                  0.0   \n",
              "2024-01-01 05:00:00                                  0.0   \n",
              "\n",
              "                     Point(Point(141.9498839 39.6442869))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   4.0   \n",
              "2024-01-01 02:00:00                                   0.0   \n",
              "2024-01-01 03:00:00                                   1.0   \n",
              "2024-01-01 04:00:00                                   1.0   \n",
              "2024-01-01 05:00:00                                   0.0   \n",
              "\n",
              "                     Point(Point(142.3294024 43.7940457))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   7.0   \n",
              "2024-01-01 02:00:00                                   5.0   \n",
              "2024-01-01 03:00:00                                   5.0   \n",
              "2024-01-01 04:00:00                                   9.0   \n",
              "2024-01-01 05:00:00                                   6.0   \n",
              "\n",
              "                     Point(Point(142.3645743 43.7702998))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   4.0   \n",
              "2024-01-01 02:00:00                                   6.0   \n",
              "2024-01-01 03:00:00                                   2.0   \n",
              "2024-01-01 04:00:00                                   5.0   \n",
              "2024-01-01 05:00:00                                   1.0   \n",
              "\n",
              "                     Point(Point(142.3964685 43.7482619))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   1.0   \n",
              "2024-01-01 02:00:00                                   8.0   \n",
              "2024-01-01 03:00:00                                   7.0   \n",
              "2024-01-01 04:00:00                                   8.0   \n",
              "2024-01-01 05:00:00                                   0.0   \n",
              "\n",
              "                     Point(Point(142.4360185 43.8107633))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   3.0   \n",
              "2024-01-01 02:00:00                                   4.0   \n",
              "2024-01-01 03:00:00                                   3.0   \n",
              "2024-01-01 04:00:00                                   6.0   \n",
              "2024-01-01 05:00:00                                   2.0   \n",
              "\n",
              "                     Point(Point(143.1960911 42.9239722))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   2.0   \n",
              "2024-01-01 02:00:00                                   0.0   \n",
              "2024-01-01 03:00:00                                   1.0   \n",
              "2024-01-01 04:00:00                                   1.0   \n",
              "2024-01-01 05:00:00                                   1.0   \n",
              "\n",
              "                     Point(Point(143.8907183 43.7987008))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   2.0   \n",
              "2024-01-01 02:00:00                                   9.0   \n",
              "2024-01-01 03:00:00                                   5.0   \n",
              "2024-01-01 04:00:00                                   3.0   \n",
              "2024-01-01 05:00:00                                   6.0   \n",
              "\n",
              "                     Point(Point(144.2606979 43.0173372))  \\\n",
              "Timestamp                                                   \n",
              "2024-01-01 01:00:00                                   0.0   \n",
              "2024-01-01 02:00:00                                   0.0   \n",
              "2024-01-01 03:00:00                                   0.0   \n",
              "2024-01-01 04:00:00                                   0.0   \n",
              "2024-01-01 05:00:00                                   0.0   \n",
              "\n",
              "                     Point(Point(144.3636328 43.0214076))  \n",
              "Timestamp                                                  \n",
              "2024-01-01 01:00:00                                   1.0  \n",
              "2024-01-01 02:00:00                                   0.0  \n",
              "2024-01-01 03:00:00                                   0.0  \n",
              "2024-01-01 04:00:00                                   3.0  \n",
              "2024-01-01 05:00:00                                   1.0  \n",
              "\n",
              "[5 rows x 1476 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-366c3039-f189-491f-867c-ef12977d5880\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Point(Point(128.8409418 32.6954809))</th>\n",
              "      <th>Point(Point(128.8460344 32.6989579))</th>\n",
              "      <th>Point(Point(129.2857639 34.2426737))</th>\n",
              "      <th>Point(Point(129.289686 34.2102138))</th>\n",
              "      <th>Point(Point(129.6669321 33.1948696))</th>\n",
              "      <th>Point(Point(129.6750369 32.9215763))</th>\n",
              "      <th>Point(Point(129.691157 33.7505959))</th>\n",
              "      <th>Point(Point(129.715007 33.3457306))</th>\n",
              "      <th>Point(Point(129.7157996 33.1804356))</th>\n",
              "      <th>Point(Point(129.7211625 33.208478))</th>\n",
              "      <th>...</th>\n",
              "      <th>Point(Point(141.925667 42.5790773))</th>\n",
              "      <th>Point(Point(141.9498839 39.6442869))</th>\n",
              "      <th>Point(Point(142.3294024 43.7940457))</th>\n",
              "      <th>Point(Point(142.3645743 43.7702998))</th>\n",
              "      <th>Point(Point(142.3964685 43.7482619))</th>\n",
              "      <th>Point(Point(142.4360185 43.8107633))</th>\n",
              "      <th>Point(Point(143.1960911 42.9239722))</th>\n",
              "      <th>Point(Point(143.8907183 43.7987008))</th>\n",
              "      <th>Point(Point(144.2606979 43.0173372))</th>\n",
              "      <th>Point(Point(144.3636328 43.0214076))</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Timestamp</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2024-01-01 01:00:00</th>\n",
              "      <td>0.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-01-01 02:00:00</th>\n",
              "      <td>0.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-01-01 03:00:00</th>\n",
              "      <td>0.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-01-01 04:00:00</th>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2024-01-01 05:00:00</th>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 1476 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-366c3039-f189-491f-867c-ef12977d5880')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-366c3039-f189-491f-867c-ef12977d5880 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-366c3039-f189-491f-867c-ef12977d5880');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-dad1221d-e2b3-4477-acab-daa51e699ea4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dad1221d-e2b3-4477-acab-daa51e699ea4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-dad1221d-e2b3-4477-acab-daa51e699ea4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Data preprocessing\n",
        "# Replace NaN values with zero\n",
        "df.fillna(0, inplace=True)\n",
        "\n",
        "# Replace values greater than or equal to 100 with zero\n",
        "df[df >= 100] = 0\n",
        "\n",
        "# Reset the index to remove the 'Timestamp' from the index and make it a column\n",
        "df.reset_index(inplace=True)\n",
        "\n",
        "# Drop the 'Timestamp' column\n",
        "df.drop(columns=['Timestamp'], inplace=True)\n",
        "\n",
        "# Display the preprocessed data\n",
        "print(df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mF5fP5ZCvoAc",
        "outputId": "86b41793-9d5f-4652-b74e-6d07cce247ba"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   Point(Point(128.8409418 32.6954809))  Point(Point(128.8460344 32.6989579))  \\\n",
            "0                                   0.0                                   9.0   \n",
            "1                                   0.0                                   8.0   \n",
            "2                                   0.0                                   5.0   \n",
            "3                                   0.0                                   4.0   \n",
            "4                                   0.0                                   4.0   \n",
            "\n",
            "   Point(Point(129.2857639 34.2426737))  Point(Point(129.289686 34.2102138))  \\\n",
            "0                                   8.0                                  7.0   \n",
            "1                                   9.0                                  7.0   \n",
            "2                                   8.0                                  7.0   \n",
            "3                                  10.0                                 13.0   \n",
            "4                                  12.0                                 13.0   \n",
            "\n",
            "   Point(Point(129.6669321 33.1948696))  Point(Point(129.6750369 32.9215763))  \\\n",
            "0                                   0.0                                   3.0   \n",
            "1                                   0.0                                   3.0   \n",
            "2                                   0.0                                   4.0   \n",
            "3                                   0.0                                   2.0   \n",
            "4                                   0.0                                   1.0   \n",
            "\n",
            "   Point(Point(129.691157 33.7505959))  Point(Point(129.715007 33.3457306))  \\\n",
            "0                                  4.0                                  4.0   \n",
            "1                                  5.0                                  8.0   \n",
            "2                                  9.0                                  8.0   \n",
            "3                                  7.0                                  7.0   \n",
            "4                                  7.0                                  8.0   \n",
            "\n",
            "   Point(Point(129.7157996 33.1804356))  Point(Point(129.7211625 33.208478))  \\\n",
            "0                                   6.0                                  0.0   \n",
            "1                                   4.0                                  0.0   \n",
            "2                                   4.0                                  0.0   \n",
            "3                                   6.0                                  0.0   \n",
            "4                                   7.0                                  0.0   \n",
            "\n",
            "   ...  Point(Point(141.925667 42.5790773))  \\\n",
            "0  ...                                  0.0   \n",
            "1  ...                                  0.0   \n",
            "2  ...                                  0.0   \n",
            "3  ...                                  0.0   \n",
            "4  ...                                  0.0   \n",
            "\n",
            "   Point(Point(141.9498839 39.6442869))  Point(Point(142.3294024 43.7940457))  \\\n",
            "0                                   4.0                                   7.0   \n",
            "1                                   0.0                                   5.0   \n",
            "2                                   1.0                                   5.0   \n",
            "3                                   1.0                                   9.0   \n",
            "4                                   0.0                                   6.0   \n",
            "\n",
            "   Point(Point(142.3645743 43.7702998))  Point(Point(142.3964685 43.7482619))  \\\n",
            "0                                   4.0                                   1.0   \n",
            "1                                   6.0                                   8.0   \n",
            "2                                   2.0                                   7.0   \n",
            "3                                   5.0                                   8.0   \n",
            "4                                   1.0                                   0.0   \n",
            "\n",
            "   Point(Point(142.4360185 43.8107633))  Point(Point(143.1960911 42.9239722))  \\\n",
            "0                                   3.0                                   2.0   \n",
            "1                                   4.0                                   0.0   \n",
            "2                                   3.0                                   1.0   \n",
            "3                                   6.0                                   1.0   \n",
            "4                                   2.0                                   1.0   \n",
            "\n",
            "   Point(Point(143.8907183 43.7987008))  Point(Point(144.2606979 43.0173372))  \\\n",
            "0                                   2.0                                   0.0   \n",
            "1                                   9.0                                   0.0   \n",
            "2                                   5.0                                   0.0   \n",
            "3                                   3.0                                   0.0   \n",
            "4                                   6.0                                   0.0   \n",
            "\n",
            "   Point(Point(144.3636328 43.0214076))  \n",
            "0                                   1.0  \n",
            "1                                   0.0  \n",
            "2                                   0.0  \n",
            "3                                   3.0  \n",
            "4                                   1.0  \n",
            "\n",
            "[5 rows x 1476 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.fillna(0)\n",
        "df.head()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 273
        },
        "id": "bOmHc2c3v7NL",
        "outputId": "c5b9abfe-6458-4e1e-8fb8-4aace425a818"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Point(Point(128.8409418 32.6954809))  Point(Point(128.8460344 32.6989579))  \\\n",
              "0                                   0.0                                   9.0   \n",
              "1                                   0.0                                   8.0   \n",
              "2                                   0.0                                   5.0   \n",
              "3                                   0.0                                   4.0   \n",
              "4                                   0.0                                   4.0   \n",
              "\n",
              "   Point(Point(129.2857639 34.2426737))  Point(Point(129.289686 34.2102138))  \\\n",
              "0                                   8.0                                  7.0   \n",
              "1                                   9.0                                  7.0   \n",
              "2                                   8.0                                  7.0   \n",
              "3                                  10.0                                 13.0   \n",
              "4                                  12.0                                 13.0   \n",
              "\n",
              "   Point(Point(129.6669321 33.1948696))  Point(Point(129.6750369 32.9215763))  \\\n",
              "0                                   0.0                                   3.0   \n",
              "1                                   0.0                                   3.0   \n",
              "2                                   0.0                                   4.0   \n",
              "3                                   0.0                                   2.0   \n",
              "4                                   0.0                                   1.0   \n",
              "\n",
              "   Point(Point(129.691157 33.7505959))  Point(Point(129.715007 33.3457306))  \\\n",
              "0                                  4.0                                  4.0   \n",
              "1                                  5.0                                  8.0   \n",
              "2                                  9.0                                  8.0   \n",
              "3                                  7.0                                  7.0   \n",
              "4                                  7.0                                  8.0   \n",
              "\n",
              "   Point(Point(129.7157996 33.1804356))  Point(Point(129.7211625 33.208478))  \\\n",
              "0                                   6.0                                  0.0   \n",
              "1                                   4.0                                  0.0   \n",
              "2                                   4.0                                  0.0   \n",
              "3                                   6.0                                  0.0   \n",
              "4                                   7.0                                  0.0   \n",
              "\n",
              "   ...  Point(Point(141.925667 42.5790773))  \\\n",
              "0  ...                                  0.0   \n",
              "1  ...                                  0.0   \n",
              "2  ...                                  0.0   \n",
              "3  ...                                  0.0   \n",
              "4  ...                                  0.0   \n",
              "\n",
              "   Point(Point(141.9498839 39.6442869))  Point(Point(142.3294024 43.7940457))  \\\n",
              "0                                   4.0                                   7.0   \n",
              "1                                   0.0                                   5.0   \n",
              "2                                   1.0                                   5.0   \n",
              "3                                   1.0                                   9.0   \n",
              "4                                   0.0                                   6.0   \n",
              "\n",
              "   Point(Point(142.3645743 43.7702998))  Point(Point(142.3964685 43.7482619))  \\\n",
              "0                                   4.0                                   1.0   \n",
              "1                                   6.0                                   8.0   \n",
              "2                                   2.0                                   7.0   \n",
              "3                                   5.0                                   8.0   \n",
              "4                                   1.0                                   0.0   \n",
              "\n",
              "   Point(Point(142.4360185 43.8107633))  Point(Point(143.1960911 42.9239722))  \\\n",
              "0                                   3.0                                   2.0   \n",
              "1                                   4.0                                   0.0   \n",
              "2                                   3.0                                   1.0   \n",
              "3                                   6.0                                   1.0   \n",
              "4                                   2.0                                   1.0   \n",
              "\n",
              "   Point(Point(143.8907183 43.7987008))  Point(Point(144.2606979 43.0173372))  \\\n",
              "0                                   2.0                                   0.0   \n",
              "1                                   9.0                                   0.0   \n",
              "2                                   5.0                                   0.0   \n",
              "3                                   3.0                                   0.0   \n",
              "4                                   6.0                                   0.0   \n",
              "\n",
              "   Point(Point(144.3636328 43.0214076))  \n",
              "0                                   1.0  \n",
              "1                                   0.0  \n",
              "2                                   0.0  \n",
              "3                                   3.0  \n",
              "4                                   1.0  \n",
              "\n",
              "[5 rows x 1476 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f5e8c4bd-f7d6-4446-8b70-5dda19d1fb4d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Point(Point(128.8409418 32.6954809))</th>\n",
              "      <th>Point(Point(128.8460344 32.6989579))</th>\n",
              "      <th>Point(Point(129.2857639 34.2426737))</th>\n",
              "      <th>Point(Point(129.289686 34.2102138))</th>\n",
              "      <th>Point(Point(129.6669321 33.1948696))</th>\n",
              "      <th>Point(Point(129.6750369 32.9215763))</th>\n",
              "      <th>Point(Point(129.691157 33.7505959))</th>\n",
              "      <th>Point(Point(129.715007 33.3457306))</th>\n",
              "      <th>Point(Point(129.7157996 33.1804356))</th>\n",
              "      <th>Point(Point(129.7211625 33.208478))</th>\n",
              "      <th>...</th>\n",
              "      <th>Point(Point(141.925667 42.5790773))</th>\n",
              "      <th>Point(Point(141.9498839 39.6442869))</th>\n",
              "      <th>Point(Point(142.3294024 43.7940457))</th>\n",
              "      <th>Point(Point(142.3645743 43.7702998))</th>\n",
              "      <th>Point(Point(142.3964685 43.7482619))</th>\n",
              "      <th>Point(Point(142.4360185 43.8107633))</th>\n",
              "      <th>Point(Point(143.1960911 42.9239722))</th>\n",
              "      <th>Point(Point(143.8907183 43.7987008))</th>\n",
              "      <th>Point(Point(144.2606979 43.0173372))</th>\n",
              "      <th>Point(Point(144.3636328 43.0214076))</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>5.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>13.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 1476 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f5e8c4bd-f7d6-4446-8b70-5dda19d1fb4d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f5e8c4bd-f7d6-4446-8b70-5dda19d1fb4d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f5e8c4bd-f7d6-4446-8b70-5dda19d1fb4d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bd96d69d-9921-4f39-a17c-5e152a9873df\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bd96d69d-9921-4f39-a17c-5e152a9873df')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bd96d69d-9921-4f39-a17c-5e152a9873df button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df"
            }
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "maxValueInEachColumn = df.max() #Gathering the maximum PM2.5 value recorded by each sensor\n",
        "maxValueInEachColumn      #Printing the maxValue of each sensor\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kAi87e-VwCqt",
        "outputId": "d38fecfd-1e5c-4c70-e841-a7e35f7516f1"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Point(Point(128.8409418 32.6954809))     0.0\n",
              "Point(Point(128.8460344 32.6989579))    45.0\n",
              "Point(Point(129.2857639 34.2426737))    32.0\n",
              "Point(Point(129.289686 34.2102138))     30.0\n",
              "Point(Point(129.6669321 33.1948696))     0.0\n",
              "                                        ... \n",
              "Point(Point(142.4360185 43.8107633))    55.0\n",
              "Point(Point(143.1960911 42.9239722))    50.0\n",
              "Point(Point(143.8907183 43.7987008))    40.0\n",
              "Point(Point(144.2606979 43.0173372))     0.0\n",
              "Point(Point(144.3636328 43.0214076))    19.0\n",
              "Length: 1476, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "maxValueInEachColumn.plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 402
        },
        "id": "dpUiglPlwGYM",
        "outputId": "753165ed-a9e4-412e-a62f-805e36cb1e7f"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 50
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "maxValueInEachColumn.plot()  #point the maximum values recorded by each sensor."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 402
        },
        "id": "m0JDXFcuNnjN",
        "outputId": "68315e6b-9209-45b1-873d-1ff92adc4ba6"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 51
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "minValueInEachColumn = df.min() #Reading the minimum PM2.5 value recorded by each sensor\n",
        "minValueInEachColumn.plot()  #ploting them\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 402
        },
        "id": "J6GjGxuw0-ll",
        "outputId": "cbbf9b5e-81ca-4be9-f5ea-681c691745d8"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 52
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.where(df > 0, 0, inplace=True)\n",
        "df.min().plot()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 402
        },
        "id": "OILDTffINQFx",
        "outputId": "64a3e90d-0496-42db-f6eb-2ad2c0d46a8c"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 53
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -U pami"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "r98lD9yVNxgc",
        "outputId": "059c2b4c-14dc-49da-bf3a-63af490554c1"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting pami\n",
            "  Downloading pami-2024.7.2-py3-none-any.whl.metadata (80 kB)\n",
            "\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/80.3 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━━━━\u001b[0m \u001b[32m71.7/80.3 kB\u001b[0m \u001b[31m2.2 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m80.3/80.3 kB\u001b[0m \u001b[31m1.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: psutil in /usr/local/lib/python3.10/dist-packages (from pami) (5.9.5)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (from pami) (2.1.4)\n",
            "Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from pami) (5.15.0)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from pami) (3.7.1)\n",
            "Collecting resource (from pami)\n",
            "  Downloading Resource-0.2.1-py2.py3-none-any.whl.metadata (478 bytes)\n",
            "Collecting validators (from pami)\n",
            "  Downloading validators-0.33.0-py3-none-any.whl.metadata (3.8 kB)\n",
            "Requirement already satisfied: urllib3 in /usr/local/lib/python3.10/dist-packages (from pami) (2.0.7)\n",
            "Requirement already satisfied: Pillow in /usr/local/lib/python3.10/dist-packages (from pami) (9.4.0)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from pami) (1.26.4)\n",
            "Requirement already satisfied: sphinx in /usr/local/lib/python3.10/dist-packages (from pami) (5.0.2)\n",
            "Collecting sphinx-rtd-theme (from pami)\n",
            "  Downloading sphinx_rtd_theme-2.0.0-py2.py3-none-any.whl.metadata (4.4 kB)\n",
            "Collecting discord.py (from pami)\n",
            "  Downloading discord.py-2.4.0-py3-none-any.whl.metadata (6.9 kB)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.10/dist-packages (from pami) (3.3)\n",
            "Collecting deprecated (from pami)\n",
            "  Downloading Deprecated-1.2.14-py2.py3-none-any.whl.metadata (5.4 kB)\n",
            "Requirement already satisfied: wrapt<2,>=1.10 in /usr/local/lib/python3.10/dist-packages (from deprecated->pami) (1.14.1)\n",
            "Requirement already satisfied: aiohttp<4,>=3.7.4 in /usr/local/lib/python3.10/dist-packages (from discord.py->pami) (3.9.5)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->pami) (1.2.1)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->pami) (0.12.1)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->pami) (4.53.1)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->pami) (1.4.5)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->pami) (24.1)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->pami) (3.1.2)\n",
            "Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib->pami) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas->pami) (2024.1)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas->pami) (2024.1)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->pami) (8.5.0)\n",
            "Collecting JsonForm>=0.0.2 (from resource->pami)\n",
            "  Downloading JsonForm-0.0.2.tar.gz (2.4 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Collecting JsonSir>=0.0.2 (from resource->pami)\n",
            "  Downloading JsonSir-0.0.2.tar.gz (2.2 kB)\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Collecting python-easyconfig>=0.1.0 (from resource->pami)\n",
            "  Downloading Python_EasyConfig-0.1.7-py2.py3-none-any.whl.metadata (462 bytes)\n",
            "Requirement already satisfied: sphinxcontrib-applehelp in /usr/local/lib/python3.10/dist-packages (from sphinx->pami) (1.0.8)\n",
            "Requirement already satisfied: sphinxcontrib-devhelp in /usr/local/lib/python3.10/dist-packages (from sphinx->pami) (1.0.6)\n",
            "Requirement already satisfied: sphinxcontrib-jsmath in /usr/local/lib/python3.10/dist-packages (from sphinx->pami) (1.0.1)\n",
            "Requirement already satisfied: sphinxcontrib-htmlhelp>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from sphinx->pami) (2.0.6)\n",
            "Requirement already satisfied: sphinxcontrib-serializinghtml>=1.1.5 in /usr/local/lib/python3.10/dist-packages (from sphinx->pami) (1.1.10)\n",
            "Requirement already satisfied: sphinxcontrib-qthelp in /usr/local/lib/python3.10/dist-packages (from sphinx->pami) (1.0.8)\n",
            "Requirement already satisfied: Jinja2>=2.3 in /usr/local/lib/python3.10/dist-packages (from sphinx->pami) (3.1.4)\n",
            "Requirement already satisfied: Pygments>=2.0 in /usr/local/lib/python3.10/dist-packages (from sphinx->pami) (2.16.1)\n",
            "Requirement already satisfied: docutils<0.19,>=0.14 in /usr/local/lib/python3.10/dist-packages (from sphinx->pami) (0.18.1)\n",
            "Requirement already satisfied: snowballstemmer>=1.1 in /usr/local/lib/python3.10/dist-packages (from sphinx->pami) (2.2.0)\n",
            "Requirement already satisfied: babel>=1.3 in /usr/local/lib/python3.10/dist-packages (from sphinx->pami) (2.15.0)\n",
            "Requirement already satisfied: alabaster<0.8,>=0.7 in /usr/local/lib/python3.10/dist-packages (from sphinx->pami) (0.7.16)\n",
            "Requirement already satisfied: imagesize in /usr/local/lib/python3.10/dist-packages (from sphinx->pami) (1.4.1)\n",
            "Requirement already satisfied: requests>=2.5.0 in /usr/local/lib/python3.10/dist-packages (from sphinx->pami) (2.31.0)\n",
            "Collecting sphinxcontrib-jquery<5,>=4 (from sphinx-rtd-theme->pami)\n",
            "  Downloading sphinxcontrib_jquery-4.1-py2.py3-none-any.whl.metadata (2.6 kB)\n",
            "Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4,>=3.7.4->discord.py->pami) (1.3.1)\n",
            "Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4,>=3.7.4->discord.py->pami) (23.2.0)\n",
            "Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4,>=3.7.4->discord.py->pami) (1.4.1)\n",
            "Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4,>=3.7.4->discord.py->pami) (6.0.5)\n",
            "Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4,>=3.7.4->discord.py->pami) (1.9.4)\n",
            "Requirement already satisfied: async-timeout<5.0,>=4.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp<4,>=3.7.4->discord.py->pami) (4.0.3)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.10/dist-packages (from Jinja2>=2.3->sphinx->pami) (2.1.5)\n",
            "Requirement already satisfied: jsonschema in /usr/local/lib/python3.10/dist-packages (from JsonForm>=0.0.2->resource->pami) (4.23.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.7->matplotlib->pami) (1.16.0)\n",
            "Requirement already satisfied: PyYAML in /usr/local/lib/python3.10/dist-packages (from python-easyconfig>=0.1.0->resource->pami) (6.0.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.5.0->sphinx->pami) (3.3.2)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.5.0->sphinx->pami) (3.7)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.5.0->sphinx->pami) (2024.7.4)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.10/dist-packages (from jsonschema->JsonForm>=0.0.2->resource->pami) (2023.12.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.10/dist-packages (from jsonschema->JsonForm>=0.0.2->resource->pami) (0.35.1)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from jsonschema->JsonForm>=0.0.2->resource->pami) (0.19.1)\n",
            "Downloading pami-2024.7.2-py3-none-any.whl (1.1 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m15.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading Deprecated-1.2.14-py2.py3-none-any.whl (9.6 kB)\n",
            "Downloading discord.py-2.4.0-py3-none-any.whl (1.1 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m50.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading Resource-0.2.1-py2.py3-none-any.whl (25 kB)\n",
            "Downloading sphinx_rtd_theme-2.0.0-py2.py3-none-any.whl (2.8 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.8/2.8 MB\u001b[0m \u001b[31m76.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading validators-0.33.0-py3-none-any.whl (43 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m43.3/43.3 kB\u001b[0m \u001b[31m2.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading Python_EasyConfig-0.1.7-py2.py3-none-any.whl (5.4 kB)\n",
            "Downloading sphinxcontrib_jquery-4.1-py2.py3-none-any.whl (121 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m121.1/121.1 kB\u001b[0m \u001b[31m9.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hBuilding wheels for collected packages: JsonForm, JsonSir\n",
            "  Building wheel for JsonForm (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for JsonForm: filename=JsonForm-0.0.2-py3-none-any.whl size=3311 sha256=708859876848b00a9cafa0b17d9a6e506ecba74aeba2b0f4b949b5d673f6bf0c\n",
            "  Stored in directory: /root/.cache/pip/wheels/b6/e5/87/11026246d3bd4ad67c0615682d2d6748bbd9a40ac0490882bd\n",
            "  Building wheel for JsonSir (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for JsonSir: filename=JsonSir-0.0.2-py3-none-any.whl size=4752 sha256=3e85239acd7089720c54e93a70d9c184980c42dda3716ac7fc96271ae61cc87a\n",
            "  Stored in directory: /root/.cache/pip/wheels/1d/4c/d3/4d9757425983b43eb709be1043d82cd03fb863ce5f56f117e6\n",
            "Successfully built JsonForm JsonSir\n",
            "Installing collected packages: JsonSir, validators, python-easyconfig, deprecated, sphinxcontrib-jquery, discord.py, sphinx-rtd-theme, JsonForm, resource, pami\n",
            "Successfully installed JsonForm-0.0.2 JsonSir-0.0.2 deprecated-1.2.14 discord.py-2.4.0 pami-2024.7.2 python-easyconfig-0.1.7 resource-0.2.1 sphinx-rtd-theme-2.0.0 sphinxcontrib-jquery-4.1 validators-0.33.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#TIME TAKING PROCESS DEPENDING ON THE DATA.\n",
        "\n",
        "from PAMI.extras.DF2DB import DenseFormatDF as db\n",
        "\n",
        "obj = db.DenseFormatDF(df)\n",
        "obj.convert2TransactionalDatabase('PM24HeavyPollutionRecordingSensors.csv', '>=', 15)"
      ],
      "metadata": {
        "id": "YVPdiVRzOM6g"
      },
      "execution_count": 73,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "2ey6rmY_Qj6I"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!head PM24HeavyPollutionRecordingSensors.csv"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wuPcItGsOimX",
        "outputId": "33a01174-e76a-403d-96f9-1436d5ee0904"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Point(Point(130.2931962 31.8321617))\tPoint(Point(130.3227599 31.4168733))\tPoint(Point(130.5175494 31.5211345))\tPoint(Point(130.5548872 31.5638531))\tPoint(Point(130.5574211 31.5967656))\tPoint(Point(130.7627325 31.7358698))\tPoint(Point(130.9403851 33.3280901))\tPoint(Point(130.995976 31.98157))\tPoint(Point(131.061519 31.719543))\tPoint(Point(131.0796778 31.76077))\tPoint(Point(131.3010585 31.8391689))\tPoint(Point(131.3849154 31.60241139999999))\tPoint(Point(131.4108541 31.9325923))\tPoint(Point(131.427765 31.9437073))\tPoint(Point(131.5187752 32.1296366))\tPoint(Point(131.8052297 33.1261432))\tPoint(Point(133.1977459 36.2789097))\tPoint(Point(136.8905668 35.0122987))\tPoint(Point(137.0564571 36.79397540000001))\tPoint(Point(138.3366179 34.9856239))\tPoint(Point(139.2565095 35.5864859))\tPoint(Point(139.3091998 35.334984))\tPoint(Point(139.3210684 35.66185249999999))\tPoint(Point(139.3223763 35.5286217))\tPoint(Point(139.3398327 35.6449805))\tPoint(Point(139.3567039 35.5485606))\tPoint(Point(139.3576209 35.4452165))\tPoint(Point(139.3634111 35.44047))\tPoint(Point(139.3678037 35.4666052))\tPoint(Point(139.3731743 35.5714754))\tPoint(Point(139.3837609 35.3726054))\tPoint(Point(139.3908038 35.446427))\tPoint(Point(139.4027683 35.3336185))\tPoint(Point(139.4078149 35.521846))\tPoint(Point(139.4168038 35.403358))\tPoint(Point(139.4492865 35.3402423))\tPoint(Point(139.4579964 35.4875298))\tPoint(Point(139.477549 35.6689308))\tPoint(Point(139.4849011 35.3473974))\tPoint(Point(139.4867465 35.45744730000001))\tPoint(Point(139.4898296 35.425629))\tPoint(Point(139.4918806 35.3388323))\tPoint(Point(139.5152296 35.539608))\tPoint(Point(139.5209463 35.3488347))\tPoint(Point(139.5257126 35.3986601))\tPoint(Point(139.5362099 35.553844))\tPoint(Point(139.5471289 35.3192067))\tPoint(Point(139.5529825 35.7247401))\tPoint(Point(139.5562603 35.7129334))\tPoint(Point(139.570463 35.6351588))\tPoint(Point(139.5855624 35.4520062))\tPoint(Point(139.5957727 35.6519663))\tPoint(Point(139.610123 35.4343409))\tPoint(Point(139.6114949 35.4653692))\tPoint(Point(139.6156393 35.4576874))\tPoint(Point(139.616884 35.778059))\tPoint(Point(139.6184164 35.402381))\tPoint(Point(139.6207388 35.1446882))\tPoint(Point(139.6292834 35.4771023))\tPoint(Point(139.6317448 35.3182278))\tPoint(Point(139.6330203 35.518987))\tPoint(Point(139.6619497 35.6727047))\tPoint(Point(139.6704215 35.2829123))\tPoint(Point(139.6849913 35.5003919))\tPoint(Point(139.7314741 35.8535759))\tPoint(Point(139.7679463 35.692767))\tPoint(Point(139.9023381 35.3316012))\tPoint(Point(140.0160722 35.4222118))\tPoint(Point(140.0533454 35.3229581))\tPoint(Point(140.1909326 36.0707298))\tPoint(Point(140.2369586 36.3857574))\tPoint(Point(140.2859778 35.434099))\tPoint(Point(140.3118002 35.6729414))\tPoint(Point(140.368981 35.5552469))\tPoint(Point(140.3798435 35.348911))\n",
            "Point(Point(130.2931962 31.8321617))\tPoint(Point(130.5175494 31.5211345))\tPoint(Point(130.5548872 31.5638531))\tPoint(Point(130.5574211 31.5967656))\tPoint(Point(130.7627325 31.7358698))\tPoint(Point(131.061519 31.719543))\tPoint(Point(131.0796778 31.76077))\tPoint(Point(131.3010585 31.8391689))\tPoint(Point(131.3849154 31.60241139999999))\tPoint(Point(131.4108541 31.9325923))\tPoint(Point(131.427765 31.9437073))\tPoint(Point(131.5187752 32.1296366))\tPoint(Point(137.0564571 36.79397540000001))\tPoint(Point(137.1753647 35.3573259))\tPoint(Point(138.2711028 37.1622865))\tPoint(Point(138.4232742 38.2340537))\tPoint(Point(139.3091998 35.334984))\tPoint(Point(139.3223763 35.5286217))\tPoint(Point(139.3567039 35.5485606))\tPoint(Point(139.3576209 35.4452165))\tPoint(Point(139.3634111 35.44047))\tPoint(Point(139.3678037 35.4666052))\tPoint(Point(139.3837609 35.3726054))\tPoint(Point(139.4027683 35.3336185))\tPoint(Point(139.4168038 35.403358))\tPoint(Point(139.4492865 35.3402423))\tPoint(Point(139.4849011 35.3473974))\tPoint(Point(139.4898296 35.425629))\tPoint(Point(139.4918806 35.3388323))\tPoint(Point(139.5209463 35.3488347))\tPoint(Point(139.5520672 35.4719976))\tPoint(Point(139.610123 35.4343409))\tPoint(Point(139.6114949 35.4653692))\tPoint(Point(139.6156393 35.4576874))\tPoint(Point(139.6292834 35.4771023))\tPoint(Point(140.0533454 35.3229581))\n",
            "Point(Point(130.2931962 31.8321617))\tPoint(Point(130.5175494 31.5211345))\tPoint(Point(130.5548872 31.5638531))\tPoint(Point(130.5574211 31.5967656))\tPoint(Point(130.7627325 31.7358698))\tPoint(Point(131.061519 31.719543))\tPoint(Point(131.0796778 31.76077))\tPoint(Point(131.3849154 31.60241139999999))\tPoint(Point(131.427765 31.9437073))\tPoint(Point(131.5187752 32.1296366))\tPoint(Point(133.1977459 36.2789097))\tPoint(Point(135.4235418 34.7126408))\tPoint(Point(137.0564571 36.79397540000001))\tPoint(Point(138.4232742 38.2340537))\tPoint(Point(139.3091998 35.334984))\tPoint(Point(139.3634111 35.44047))\tPoint(Point(139.3837609 35.3726054))\tPoint(Point(139.4027683 35.3336185))\tPoint(Point(139.4492865 35.3402423))\tPoint(Point(139.4849011 35.3473974))\tPoint(Point(140.0345225 38.1106376))\tPoint(Point(140.1671688 36.0427672))\n",
            "Point(Point(130.2931962 31.8321617))\tPoint(Point(130.5574211 31.5967656))\tPoint(Point(130.7627325 31.7358698))\tPoint(Point(131.0796778 31.76077))\tPoint(Point(131.3849154 31.60241139999999))\tPoint(Point(131.427765 31.9437073))\tPoint(Point(131.5187752 32.1296366))\tPoint(Point(137.0564571 36.79397540000001))\tPoint(Point(139.3837609 35.3726054))\tPoint(Point(139.4027683 35.3336185))\n",
            "Point(Point(130.7627325 31.7358698))\tPoint(Point(131.061519 31.719543))\tPoint(Point(131.0796778 31.76077))\tPoint(Point(131.3849154 31.60241139999999))\tPoint(Point(132.221021 35.0112753))\tPoint(Point(132.7326196 33.8884275))\tPoint(Point(137.0564571 36.79397540000001))\n",
            "Point(Point(129.289686 34.2102138))\tPoint(Point(130.737949 33.8252769))\tPoint(Point(130.7627325 31.7358698))\tPoint(Point(130.8293822 33.8952617))\tPoint(Point(131.061519 31.719543))\tPoint(Point(131.0796778 31.76077))\tPoint(Point(131.5312689 33.3784676))\tPoint(Point(132.221021 35.0112753))\tPoint(Point(137.0564571 36.79397540000001))\n",
            "Point(Point(129.2857639 34.2426737))\tPoint(Point(130.6939898 33.89368080000001))\tPoint(Point(130.737949 33.8252769))\tPoint(Point(130.7597913 33.8615931))\tPoint(Point(130.8073796 33.9015062))\tPoint(Point(130.8293822 33.8952617))\tPoint(Point(130.9882162 34.003159))\tPoint(Point(131.061519 31.719543))\tPoint(Point(131.0796778 31.76077))\tPoint(Point(140.0345225 38.1106376))\n",
            "Point(Point(129.289686 34.2102138))\tPoint(Point(130.2105074 33.5646022))\tPoint(Point(130.6939898 33.89368080000001))\tPoint(Point(130.8073796 33.9015062))\tPoint(Point(130.8293822 33.8952617))\tPoint(Point(130.9882162 34.003159))\tPoint(Point(131.0796778 31.76077))\tPoint(Point(131.5312689 33.3784676))\tPoint(Point(133.5500676 33.9810411))\n",
            "Point(Point(130.2527462 33.5854231))\tPoint(Point(130.4385813 33.6719413))\tPoint(Point(130.7597913 33.8615931))\tPoint(Point(130.9612121 33.8854016))\tPoint(Point(131.4830418 33.2896192))\tPoint(Point(135.0828637 35.1294529))\tPoint(Point(139.3996248 35.93095539999999))\n",
            "Point(Point(130.3597423 33.5840497))\tPoint(Point(130.4385813 33.6719413))\tPoint(Point(130.7597913 33.8615931))\tPoint(Point(130.8073796 33.9015062))\tPoint(Point(130.8293822 33.8952617))\tPoint(Point(130.9403851 33.3280901))\tPoint(Point(130.96973 33.9473094))\tPoint(Point(132.4716534 34.4518447))\tPoint(Point(134.9988343 34.7215534))\tPoint(Point(135.1987627 34.2610732))\tPoint(Point(139.3996248 35.93095539999999))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from PAMI.extras.dbStats import TransactionalDatabase as tds\n",
        "obj = tds.TransactionalDatabase('PM24HeavyPollutionRecordingSensors.csv')\n",
        "obj.run()\n",
        "obj.printStats()\n",
        "obj.plotGraphs()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "58iKAgEsSwes",
        "outputId": "11c2ca2e-692f-40ff-87be-4c3df903479f"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Database size (total no of transactions) : 742\n",
            "Number of items : 958\n",
            "Minimum Transaction Size : 1\n",
            "Average Transaction Size : 84.42991913746631\n",
            "Maximum Transaction Size : 491\n",
            "Standard Deviation Transaction Size : 107.46656131217284\n",
            "Variance in Transaction Sizes : 11564.647578670916\n",
            "Sparsity : 0.9118685603993045\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from PAMI.frequentPattern.basic import FPGrowth as ab\n",
        "obj = ab.FPGrowth('PM24HeavyPollutionRecordingSensors.csv', minSup=200) #If the execution is taking too much time, kill the process and use a higher minimum support value.\n",
        "obj.mine()\n",
        "obj.printResults()\n",
        "obj.save('frequentPatterns.txt') #It is a good practise to store the parameters used for an experiment as a file name"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7TQwUo4IT4f0",
        "outputId": "a5fb33bc-9edb-4738-807d-9793b7e00fbb"
      },
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Frequent patterns were generated successfully using frequentPatternGrowth algorithm\n",
            "Total number of Frequent Patterns: 10\n",
            "Total Memory in USS: 1294241792\n",
            "Total Memory in RSS 1316462592\n",
            "Total ExecutionTime in ms: 0.05212759971618652\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from PAMI.extras.graph import visualizePatterns as fig\n",
        "\n",
        "obj = fig.visualizePatterns('frequentPatterns.txt',10)\n",
        "obj.visualize(width=1000,height=900)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "7G3GLvF1Uq8W",
        "outputId": "774cc30f-0829-46d8-9b4d-137cd7a1b0e2"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number \t Pattern\n",
            "2\tPoint(Point(131.061519 31.719543))\n",
            "3\tPoint(Point(139.880097 35.953403))\n",
            "4\tPoint(Point(131.0796778 31.76077))\n",
            "5\tPoint(Point(138.558107 35.6362127))\n",
            "6\tPoint(Point(139.8530976 35.7608755))\n",
            "7\tPoint(Point(130.6895799 33.3492657))\n",
            "8\tPoint(Point(130.4461332 33.0301519))\n",
            "9\tPoint(Point(138.7129066 35.7037494))\n",
            "10\tPoint(Point(139.8841693 35.8422674))\n",
            "11\tPoint(Point(142.3294024 43.7940457))\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-2.24.1.min.js\"></script>                <div id=\"e39cb2fb-fa4c-4947-845d-12bef2faf8a9\" class=\"plotly-graph-div\" style=\"height:900px; width:1000px;\"></div>            <script type=\"text/javascript\">                                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"e39cb2fb-fa4c-4947-845d-12bef2faf8a9\")) {                    Plotly.newPlot(                        \"e39cb2fb-fa4c-4947-845d-12bef2faf8a9\",                        [{\"hovertemplate\":\"\\u003cb\\u003e%{hovertext}\\u003c\\u002fb\\u003e\\u003cbr\\u003e\\u003cbr\\u003ecol=#0014\\u003cbr\\u003elon=%{lat}\\u003cbr\\u003elat=%{lon}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"hovertext\":[\"Frequency: 217\"],\"lat\":[31.719543],\"legendgroup\":\"#0014\",\"lon\":[131.061519],\"marker\":{\"color\":\"#636efa\",\"size\":20},\"mode\":\"markers\",\"name\":\"#0014\",\"showlegend\":true,\"subplot\":\"mapbox\",\"type\":\"scattermapbox\"},{\"hovertemplate\":\"\\u003cb\\u003e%{hovertext}\\u003c\\u002fb\\u003e\\u003cbr\\u003e\\u003cbr\\u003ecol=#14014\\u003cbr\\u003elon=%{lat}\\u003cbr\\u003elat=%{lon}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"hovertext\":[\"Frequency: 220\"],\"lat\":[35.953403],\"legendgroup\":\"#14014\",\"lon\":[139.880097],\"marker\":{\"color\":\"#EF553B\",\"size\":20},\"mode\":\"markers\",\"name\":\"#14014\",\"showlegend\":true,\"subplot\":\"mapbox\",\"type\":\"scattermapbox\"},{\"hovertemplate\":\"\\u003cb\\u003e%{hovertext}\\u003c\\u002fb\\u003e\\u003cbr\\u003e\\u003cbr\\u003ecol=#141414\\u003cbr\\u003elon=%{lat}\\u003cbr\\u003elat=%{lon}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"hovertext\":[\"Frequency: 302\"],\"lat\":[31.76077],\"legendgroup\":\"#141414\",\"lon\":[131.0796778],\"marker\":{\"color\":\"#00cc96\",\"size\":20},\"mode\":\"markers\",\"name\":\"#141414\",\"showlegend\":true,\"subplot\":\"mapbox\",\"type\":\"scattermapbox\"},{\"hovertemplate\":\"\\u003cb\\u003e%{hovertext}\\u003c\\u002fb\\u003e\\u003cbr\\u003e\\u003cbr\\u003ecol=#141428\\u003cbr\\u003elon=%{lat}\\u003cbr\\u003elat=%{lon}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"hovertext\":[\"Frequency: 200\"],\"lat\":[35.6362127],\"legendgroup\":\"#141428\",\"lon\":[138.558107],\"marker\":{\"color\":\"#ab63fa\",\"size\":20},\"mode\":\"markers\",\"name\":\"#141428\",\"showlegend\":true,\"subplot\":\"mapbox\",\"type\":\"scattermapbox\"},{\"hovertemplate\":\"\\u003cb\\u003e%{hovertext}\\u003c\\u002fb\\u003e\\u003cbr\\u003e\\u003cbr\\u003ecol=#281428\\u003cbr\\u003elon=%{lat}\\u003cbr\\u003elat=%{lon}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"hovertext\":[\"Frequency: 202\"],\"lat\":[35.7608755],\"legendgroup\":\"#281428\",\"lon\":[139.8530976],\"marker\":{\"color\":\"#FFA15A\",\"size\":20},\"mode\":\"markers\",\"name\":\"#281428\",\"showlegend\":true,\"subplot\":\"mapbox\",\"type\":\"scattermapbox\"},{\"hovertemplate\":\"\\u003cb\\u003e%{hovertext}\\u003c\\u002fb\\u003e\\u003cbr\\u003e\\u003cbr\\u003ecol=#282828\\u003cbr\\u003elon=%{lat}\\u003cbr\\u003elat=%{lon}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"hovertext\":[\"Frequency: 205\"],\"lat\":[33.3492657],\"legendgroup\":\"#282828\",\"lon\":[130.6895799],\"marker\":{\"color\":\"#19d3f3\",\"size\":20},\"mode\":\"markers\",\"name\":\"#282828\",\"showlegend\":true,\"subplot\":\"mapbox\",\"type\":\"scattermapbox\"},{\"hovertemplate\":\"\\u003cb\\u003e%{hovertext}\\u003c\\u002fb\\u003e\\u003cbr\\u003e\\u003cbr\\u003ecol=#28283c\\u003cbr\\u003elon=%{lat}\\u003cbr\\u003elat=%{lon}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"hovertext\":[\"Frequency: 219\"],\"lat\":[33.0301519],\"legendgroup\":\"#28283c\",\"lon\":[130.4461332],\"marker\":{\"color\":\"#FF6692\",\"size\":20},\"mode\":\"markers\",\"name\":\"#28283c\",\"showlegend\":true,\"subplot\":\"mapbox\",\"type\":\"scattermapbox\"},{\"hovertemplate\":\"\\u003cb\\u003e%{hovertext}\\u003c\\u002fb\\u003e\\u003cbr\\u003e\\u003cbr\\u003ecol=#3c283c\\u003cbr\\u003elon=%{lat}\\u003cbr\\u003elat=%{lon}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"hovertext\":[\"Frequency: 221\"],\"lat\":[35.7037494],\"legendgroup\":\"#3c283c\",\"lon\":[138.7129066],\"marker\":{\"color\":\"#B6E880\",\"size\":20},\"mode\":\"markers\",\"name\":\"#3c283c\",\"showlegend\":true,\"subplot\":\"mapbox\",\"type\":\"scattermapbox\"},{\"hovertemplate\":\"\\u003cb\\u003e%{hovertext}\\u003c\\u002fb\\u003e\\u003cbr\\u003e\\u003cbr\\u003ecol=#3c3c3c\\u003cbr\\u003elon=%{lat}\\u003cbr\\u003elat=%{lon}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"hovertext\":[\"Frequency: 231\"],\"lat\":[35.8422674],\"legendgroup\":\"#3c3c3c\",\"lon\":[139.8841693],\"marker\":{\"color\":\"#FF97FF\",\"size\":20},\"mode\":\"markers\",\"name\":\"#3c3c3c\",\"showlegend\":true,\"subplot\":\"mapbox\",\"type\":\"scattermapbox\"},{\"hovertemplate\":\"\\u003cb\\u003e%{hovertext}\\u003c\\u002fb\\u003e\\u003cbr\\u003e\\u003cbr\\u003ecol=#3c3c50\\u003cbr\\u003elon=%{lat}\\u003cbr\\u003elat=%{lon}\\u003cextra\\u003e\\u003c\\u002fextra\\u003e\",\"hovertext\":[\"Frequency: 270\"],\"lat\":[43.7940457],\"legendgroup\":\"#3c3c50\",\"lon\":[142.3294024],\"marker\":{\"color\":\"#FECB52\",\"size\":20},\"mode\":\"markers\",\"name\":\"#3c3c50\",\"showlegend\":true,\"subplot\":\"mapbox\",\"type\":\"scattermapbox\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"mapbox\":{\"domain\":{\"x\":[0.0,1.0],\"y\":[0.0,1.0]},\"center\":{\"lat\":35.255028429999996,\"lon\":136.24946898},\"zoom\":3,\"style\":\"open-street-map\"},\"legend\":{\"title\":{\"text\":\"col\"},\"tracegroupgap\":0},\"margin\":{\"t\":60},\"height\":900,\"width\":1000},                        {\"responsive\": true}                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('e39cb2fb-fa4c-4947-845d-12bef2faf8a9');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })                };                            </script>        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "9uiEP8sO5r5h"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
